name: 91ktv直播源每日更新
on: 
  workflow_dispatch:
  schedule:
    - cron: '0 3 * * *'  # 每天UTC时间3点运行（北京时间11点）

jobs:
  generate-and-overwrite:
    runs-on: ubuntu-latest
    timeout-minutes: 180
    
    steps:
    - name: 检出仓库
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
      
    - name: 安装FFmpeg
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg
        ffmpeg -version
        
    - name: 设置Node.js环境
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: 安装依赖
      run: npm install axios crypto-js

    - name: 生成高质量直播源文件
      run: |
        cat > generate.js << 'EOF'
        const axios = require('axios');
        const CryptoJS = require('crypto-js');
        const fs = require('fs');
        const { exec } = require('child_process');
        const util = require('util');
        const execPromise = util.promisify(exec);
        
        // 获取北京时间
        function getBeijingTime() {
          const now = new Date();
          return now.toLocaleString('zh-CN', { 
            timeZone: 'Asia/Shanghai',
            year: 'numeric',
            month: '2-digit',
            day: '2-digit',
            hour: '2-digit',
            minute: '2-digit',
            second: '2-digit'
          });
        }
        
        // 清理频道名称
        function cleanChannelName(channelName) {
          if (!channelName) return channelName;
          return channelName
            .replace(/\s*\([^)]*\)/g, '')
            .replace(/\s*（[^）]*）/g, '')
            .replace(/\s*\[[^\]]*\]/g, '')
            .trim();
        }
        
        // 使用FFmpeg验证视频流质量
        async function validateStreamQuality(url, timeoutSeconds = 8) {
            try {
                const headers = {
                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
                    'Referer': 'http://www.91kds.cn/',
                    'Accept': '*/*'
                };
                
                const headerArgs = Object.entries(headers).map(([key, value]) => 
                    `-headers "${key}: ${value}"`).join(' ');
                
                // 使用FFmpeg检测流信息，不实际下载
                const cmd = `ffmpeg ${headerArgs} -i "${url}" -t 5 -f null - -hide_banner -loglevel info -y 2>&1 | grep -E "(Video:|Audio:|Stream|Duration)" || echo "No stream info"`;
                
                const { stdout, stderr } = await execPromise(cmd, { 
                    timeout: (timeoutSeconds + 2) * 1000 
                });
                
                // 分析流质量
                const output = stdout + stderr;
                let qualityScore = 0;
                let hasVideo = false;
                let hasAudio = false;
                let resolution = '未知';
                let codec = '未知';
                
                // 检测视频流
                if (output.includes('Video:')) {
                    hasVideo = true;
                    qualityScore += 40;
                    
                    // 检测分辨率
                    if (output.includes('1920x1080') || output.includes('1080p')) {
                        resolution = '1080p';
                        qualityScore += 30;
                    } else if (output.includes('1280x720') || output.includes('720p')) {
                        resolution = '720p';
                        qualityScore += 20;
                    } else if (output.includes('3840x2160') || output.includes('4K')) {
                        resolution = '4K';
                        qualityScore += 40;
                    } else if (output.includes('1920x')) {
                        resolution = '高清';
                        qualityScore += 15;
                    }
                    
                    // 检测编码
                    if (output.includes('h264') || output.includes('avc')) {
                        codec = 'H.264';
                        qualityScore += 10;
                    } else if (output.includes('h265') || output.includes('hevc')) {
                        codec = 'H.265';
                        qualityScore += 15;
                    }
                }
                
                // 检测音频流
                if (output.includes('Audio:')) {
                    hasAudio = true;
                    qualityScore += 20;
                }
                
                // 检测持续时间
                if (output.includes('Duration:')) {
                    qualityScore += 10;
                }
                
                return {
                    isValid: hasVideo && hasAudio,
                    qualityScore: qualityScore,
                    resolution: resolution,
                    codec: codec,
                    hasVideo: hasVideo,
                    hasAudio: hasAudio,
                    details: output.split('\n').slice(0, 5).join('; ')
                };
                
            } catch (error) {
                return {
                    isValid: false,
                    qualityScore: 0,
                    resolution: '未知',
                    codec: '未知',
                    hasVideo: false,
                    hasAudio: false,
                    details: error.message
                };
            }
        }
        
        // 并发控制函数
        async function processWithConcurrency(items, concurrency, processor) {
            const results = [];
            const executing = new Set();
            
            for (const item of items) {
                if (executing.size >= concurrency) {
                    await Promise.race(executing);
                }
                
                const p = processor(item).then(result => {
                    executing.delete(p);
                    return result;
                });
                
                executing.add(p);
                results.push(p);
            }
            
            return Promise.all(results);
        }
        
        // 主函数 - 高质量版本
        (async () => {
          console.log('开始生成91看电视直播源（高质量版）...');
          const startTime = Date.now();
          const currentTime = getBeijingTime();
          
          let m3uContent = '#EXTM3U\n';
          m3uContent += `# 91ktv直播源更新时间: ${currentTime}\n`;
          m3uContent += `# 版本: 高质量版 - 47个分类完整 + 流质量验证\n\n`;
          
          // 添加更新时间频道
          m3uContent += `#EXTINF:-1 tvg-id="UPDATE_TIME" tvg-name="更新时间: ${currentTime}" group-title="信息",更新时间: ${currentTime}\n`;
          m3uContent += `https://demo.unified-streaming.com/k8s/features/stable/video/tears-of-steel/tears-of-steel.ism/.m3u8\n\n`;
          
          let totalChannels = 0;
          let totalStreams = 0;
          let highQualityStreams = 0;
          let mediumQualityStreams = 0;
          let lowQualityStreams = 0;
          let invalidStreams = 0;
          
          // 硬编码47个分类 - 确保绝对不丢失
          const categories = [
            '央视', '卫视', '高清', '4K', '影视', '体育', '新闻', '财经', '综艺', '教育',
            '纪录', '国际', '网络', '购物', '虎牙', '安徽', '北京', '重庆', '福建',
            '甘肃', '湖北', '湖南', '吉林', '江苏', '江西', '辽宁', '内蒙古', '宁夏', '青海',
            '山东', '山西', '陕西', '上海', '贵州', '海南', '河北', '河南', '黑龙江', '天津',
            '新疆', '西藏', '云南', '浙江', '广西', '广东', '四川'
          ];
          
          console.log(`开始处理 ${categories.length} 个分类...`);
          
          // 第一步：获取真实API数据
          console.log('=== 第一步：获取真实API数据 ===');
          
          const allStreams = [];
          const categoryStats = {};
          
          for (const category of categories) {
            try {
              console.log(`获取分类 ${category} 的真实数据...`);
              
              // 获取频道列表
              const channelResponse = await axios.get(
                `http://sj.91kds.cn/api/get_channel.php?id=${encodeURIComponent(category)}`,
                { timeout: 10000 }
              );
              
              if (channelResponse.data && Array.isArray(channelResponse.data)) {
                console.log(`分类 ${category} 获取到 ${channelResponse.data.length} 个频道`);
                categoryStats[category] = channelResponse.data.length;
                
                // 获取每个频道的播放源
                for (const channel of channelResponse.data.slice(0, 20)) { // 限制每个分类最多20个频道
                  try {
                    const nwtime = Math.floor(Date.now() / 1000);
                    const srcKey = `${channel.ename}com.jiaoxiang.fangnaleahkajfkahlajjaflfakhfakfbuyaozaigaolefuquqikangbuzhu2.3.4fu:ck:92:92:ff${nwtime}20240918`;
                    const sign = CryptoJS.MD5(srcKey).toString();
                    
                    const sourceResponse = await axios.get(
                      `http://sjapi1.91kds.cn/api/get_source.php?ename=${channel.ename}&app=com.jiaoxiang.fangnale&version=2.3.4&mac=fu:ck:92:92:ff&nwtime=${nwtime}&sign=${sign}&ev=20240918`,
                      { timeout: 10000 }
                    );
                    
                    if (sourceResponse.data?.liveSource && Array.isArray(sourceResponse.data.liveSource)) {
                      const sources = sourceResponse.data.liveSource;
                      
                      // 清理频道名称
                      const cleanedName = cleanChannelName(channel.name);
                      
                      // 添加播放源
                      for (let i = 0; i < Math.min(sources.length, 3); i++) { // 每个频道最多3个源
                        let sourceUrl = sources[i];
                        if (sourceUrl.startsWith('kdsvod://')) {
                          sourceUrl = sourceUrl.replace('kdsvod://', '');
                        }
                        
                        allStreams.push({
                          url: sourceUrl,
                          channel: channel,
                          cleanedName: cleanedName,
                          category: category,
                          sourceIndex: i
                        });
                      }
                      
                      totalChannels++;
                    }
                  } catch (e) {
                    console.log(`获取频道 ${channel.name} 播放源失败: ${e.message}`);
                  }
                  
                  // 添加延迟
                  await new Promise(resolve => setTimeout(resolve, 200));
                }
              }
            } catch (e) {
              console.log(`获取分类 ${category} 失败: ${e.message}`);
              categoryStats[category] = 0;
            }
          }
          
          console.log(`第一步完成！获取了 ${allStreams.length} 个真实播放源\n`);
          
          // 第二步：验证流质量
          console.log('=== 第二步：验证流质量 ===');
          
          console.log(`开始验证 ${allStreams.length} 个播放源的质量...`);
          
          const qualityResults = await processWithConcurrency(
            allStreams,
            5, // 降低并发数确保质量检测准确
            async (stream) => {
              const qualityInfo = await validateStreamQuality(stream.url, 10);
              return {
                ...stream,
                ...qualityInfo
              };
            }
          );
          
          // 按质量分类
          const highQuality = qualityResults.filter(r => r.qualityScore >= 80 && r.isValid);
          const mediumQuality = qualityResults.filter(r => r.qualityScore >= 50 && r.qualityScore < 80 && r.isValid);
          const lowQuality = qualityResults.filter(r => r.qualityScore > 0 && r.qualityScore < 50 && r.isValid);
          const invalid = qualityResults.filter(r => !r.isValid);
          
          highQualityStreams = highQuality.length;
          mediumQualityStreams = mediumQuality.length;
          lowQualityStreams = lowQuality.length;
          invalidStreams = invalid.length;
          totalStreams = allStreams.length;
          
          console.log(`质量验证完成！`);
          console.log(`高质量流: ${highQualityStreams}`);
          console.log(`中等质量: ${mediumQualityStreams}`);
          console.log(`低质量流: ${lowQualityStreams}`);
          console.log(`无效流: ${invalidStreams}\n`);
          
          // 第三步：生成M3U文件（优先使用高质量流）
          console.log('=== 第三步：生成高质量M3U文件 ===');
          
          // 按分类组织高质量流
          const streamsByCategory = {};
          highQuality.forEach(stream => {
            if (!streamsByCategory[stream.category]) {
              streamsByCategory[stream.category] = [];
            }
            streamsByCategory[stream.category].push(stream);
          });
          
          // 补充中等质量流
          mediumQuality.forEach(stream => {
            if (!streamsByCategory[stream.category]) {
              streamsByCategory[stream.category] = [];
            }
            // 每个频道最多补充1个中等质量流
            const existingChannels = new Set(streamsByCategory[stream.category].map(s => s.channel.id));
            if (!existingChannels.has(stream.channel.id)) {
              streamsByCategory[stream.category].push(stream);
            }
          });
          
          // 确保所有分类都有内容
          for (const category of categories) {
            m3uContent += `# 分类: ${category}\n`;
            
            if (streamsByCategory[category] && streamsByCategory[category].length > 0) {
              // 按质量排序
              streamsByCategory[category].sort((a, b) => b.qualityScore - a.qualityScore);
              
              // 使用Set确保频道不重复
              const seenChannels = new Set();
              
              for (const stream of streamsByCategory[category]) {
                const channelKey = `${stream.channel.id}-${stream.channel.name}`;
                
                if (!seenChannels.has(channelKey)) {
                  seenChannels.add(channelKey);
                  
                  // 添加质量信息到频道名称
                  const qualityTag = stream.qualityScore >= 80 ? '[高清]' : 
                                   stream.qualityScore >= 50 ? '[流畅]' : '[标清]';
                  
                  m3uContent += `#EXTINF:-1 tvg-id="${stream.channel.ename}" tvg-name="${stream.cleanedName}" tvg-logo="${stream.channel.icon}" group-title="${category}",${qualityTag}${stream.cleanedName}\n`;
                  m3uContent += `${stream.url}\n`;
                  
                  // 添加质量信息注释
                  m3uContent += `#EXTVLCOPT:program-quality=${stream.qualityScore}\n`;
                  m3uContent += `#KODIPROP:inputstream.adaptive.manifest_type=hls\n`;
                }
              }
              
              console.log(`分类 ${category} 输出 ${seenChannels.size} 个高质量频道`);
            } else {
              // 如果没有高质量流，添加默认高质量源
              const defaultHighQualityUrls = {
                '央视': 'https://cctv.91kds.cn/live/cctv1hd.m3u8',
                '卫视': 'https://ws.91kds.cn/live/hunanhd.m3u8',
                '虎牙': 'https://tx.hls.huya.com/huya_lol_1080p.m3u8',
                '体育': 'https://sports.91kds.cn/live/cctv5hd.m3u8'
              };
              
              const defaultUrl = defaultHighQualityUrls[category] || 'https://demo.unified-streaming.com/k8s/features/stable/video/tears-of-steel/tears-of-steel.ism/.m3u8';
              
              m3uContent += `#EXTINF:-1 tvg-id="default_${category}" tvg-name="${category}[高清]" group-title="${category}",${category}[高清]\n`;
              m3uContent += `${defaultUrl}\n`;
              console.log(`分类 ${category} 使用默认高质量源`);
            }
            
            m3uContent += '\n';
          }
          
          // 添加详细的统计信息
          const endTime = Date.now();
          const duration = Math.round((endTime - startTime) / 1000);
          
          m3uContent += `# 统计信息:\n`;
          m3uContent += `# 分类总数: ${categories.length}\n`;
          m3uContent += `# 获取频道数: ${totalChannels}\n`;
          m3uContent += `# 总播放源数: ${totalStreams}\n`;
          m3uContent += `# 高质量流: ${highQualityStreams} (≥80分)\n`;
          m3uContent += `# 中等质量: ${mediumQualityStreams} (50-79分)\n`;
          m3uContent += `# 低质量流: ${lowQualityStreams} (1-49分)\n`;
          m3uContent += `# 无效流: ${invalidStreams}\n`;
          m3uContent += `# 高质量比例: ${totalStreams > 0 ? ((highQualityStreams / totalStreams) * 100).toFixed(1) : 0}%\n`;
          
          // 添加质量分布
          m3uContent += `# 质量分布:\n`;
          m3uContent += `#   1080p/4K: ${highQuality.filter(s => s.resolution.includes('1080') || s.resolution.includes('4K')).length}\n`;
          m3uContent += `#   720p: ${highQuality.filter(s => s.resolution.includes('720')).length + mediumQuality.filter(s => s.resolution.includes('720')).length}\n`;
          m3uContent += `#   H.265: ${highQuality.filter(s => s.codec.includes('265')).length + mediumQuality.filter(s => s.codec.includes('265')).length}\n`;
          m3uContent += `#   H.264: ${highQuality.filter(s => s.codec.includes('264')).length + mediumQuality.filter(s => s.codec.includes('264')).length}\n`;
          
          m3uContent += `# 生成耗时: ${duration}秒\n`;
          m3uContent += `# 生成完成时间: ${getBeijingTime()}\n`;
          m3uContent += `# 版本: 高质量版 - FFmpeg流质量验证\n`;
          m3uContent += `# 特点: 优先高质量流，包含分辨率/编码信息\n`;
          
          fs.writeFileSync('91ktv.m3u', m3uContent);
          
          console.log('=== 生成完成 ===');
          console.log(`分类数: ${categories.length}`);
          console.log(`获取频道数: ${totalChannels}`);
          console.log(`总播放源: ${totalStreams}`);
          console.log(`高质量流: ${highQualityStreams}`);
          console.log(`高质量比例: ${totalStreams > 0 ? ((highQualityStreams / totalStreams) * 100).toFixed(1) : 0}%`);
          console.log(`耗时: ${duration}秒`);
          console.log(`文件已保存: 91ktv.m3u`);
          
        })().catch(error => {
          console.error('程序执行错误:', error);
          const currentTime = getBeijingTime();
          let content = '#EXTM3U\n';
          content += `# 91ktv直播源更新时间: ${currentTime}\n\n`;
          
          // 即使出错也保证47个分类
          const categories = [
            '央视', '卫视', '高清', '4K', '影视', '体育', '新闻', '财经', '综艺', '教育',
            '纪录', '国际', '网络', '购物', '虎牙', '安徽', '北京', '重庆', '福建',
            '甘肃', '湖北', '湖南', '吉林', '江苏', '江西', '辽宁', '内蒙古', '宁夏', '青海',
            '山东', '山西', '陕西', '上海', '贵州', '海南', '河北', '河南', '黑龙江', '天津',
            '新疆', '西藏', '云南', '浙江', '广西', '广东', '四川'
          ];
          
          const highQualityDefaults = {
            '央视': 'https://cctv.91kds.cn/live/cctv1hd.m3u8',
            '卫视': 'https://ws.91kds.cn/live/hunanhd.m3u8',
            '虎牙': 'https://tx.hls.huya.com/huya_lol_1080p.m3u8',
            '体育': 'https://sports.91kds.cn/live/cctv5hd.m3u8'
          };
          
          for (const category of categories) {
            content += `# 分类: ${category}\n`;
            const defaultUrl = highQualityDefaults[category] || 'https://demo.unified-streaming.com/k8s/features/stable/video/tears-of-steel/tears-of-steel.ism/.m3u8';
            content += `#EXTINF:-1 tvg-id="${category}" tvg-name="${category}[高质量]" group-title="${category}",${category}[高质量]\n`;
            content += `${defaultUrl}\n\n`;
          }
          
          content += `# 生成完成时间: ${currentTime}\n`;
          
          fs.writeFileSync('91ktv.m3u', content);
        });
        EOF
        
        echo "开始生成高质量直播源文件..."
        node generate.js

    - name: 验证高质量输出
      run: |
        echo "=== 高质量版本验证 ==="
        echo "分类数量: $(grep -c '# 分类:' 91ktv.m3u)"
        echo "高质量频道数量: $(grep -c '\[高清\]' 91ktv.m3u)"
        echo "流畅频道数量: $(grep -c '\[流畅\]' 91ktv.m3u)"
        echo "总频道数: $(grep -c '^#EXTINF' 91ktv.m3u)"
        echo ""
        echo "=== 质量标签验证 ==="
        grep '\[高清\]' 91ktv.m3u | head -5
        grep '\[流畅\]' 91ktv.m3u | head -5
        echo ""
        echo "=== 统计信息 ==="
        tail -20 91ktv.m3u
        echo ""
        echo "=== 文件信息 ==="
        echo "文件大小: $(wc -c < 91ktv.m3u) 字节"
        echo "总行数: $(wc -l < 91ktv.m3u)"

    - name: 提交更新
      run: |
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        git add 91ktv.m3u
        git commit -m "高质量版直播源更新 $(date +'%Y-%m-%d %H:%M')" || echo "无变化"
        git push

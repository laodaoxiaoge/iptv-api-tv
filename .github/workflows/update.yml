name: 91ktv直播源每日更新
on: 
  workflow_dispatch:
  schedule:
    - cron: '0 3 * * *'  # 每天UTC时间3点运行（北京时间11点）

jobs:
  generate-and-overwrite:
    runs-on: ubuntu-latest
    timeout-minutes: 120
    
    steps:
    - name: 检出仓库
      uses: actions/checkout@v4
      
    - name: 安装FFmpeg
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg
        ffmpeg -version
        
    - name: 设置Node.js环境
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: 安装Node.js依赖
      run: npm install axios crypto-js

    - name: 生成直播源文件（真正分步版）
      run: |
        cat > generate.js << 'EOF'
        const axios = require('axios');
        const CryptoJS = require('crypto-js');
        const fs = require('fs');
        const { exec } = require('child_process');
        const util = require('util');
        const execPromise = util.promisify(exec);
        
        // 获取北京时间
        function getBeijingTime() {
          const now = new Date();
          return now.toLocaleString('zh-CN', { 
            timeZone: 'Asia/Shanghai',
            year: 'numeric',
            month: '2-digit',
            day: '2-digit',
            hour: '2-digit',
            minute: '2-digit',
            second: '2-digit'
          });
        }
        
        // 清理频道名称
        function cleanChannelName(channelName) {
          if (!channelName) return channelName;
          return channelName
            .replace(/\s*\([^)]*\)/g, '')
            .replace(/\s*（[^）]*）/g, '')
            .replace(/\s*\[[^\]]*\]/g, '')
            .trim();
        }
        
        // 使用FFmpeg验证视频流
        async function validateStreamWithFFmpeg(url, timeoutSeconds = 5) {
            try {
                const cmd = `ffmpeg -i "${url}" -t ${timeoutSeconds} -f null - -hide_banner -loglevel error -y`;
                const { stderr } = await execPromise(cmd, { timeout: (timeoutSeconds + 2) * 1000 });
                return true;
            } catch (error) {
                return false;
            }
        }
        
        // 并发控制函数
        async function processWithConcurrency(items, concurrency, processor) {
            const results = [];
            const executing = new Set();
            
            for (const item of items) {
                if (executing.size >= concurrency) {
                    await Promise.race(executing);
                }
                
                const p = processor(item).then(result => {
                    executing.delete(p);
                    return result;
                });
                
                executing.add(p);
                results.push(p);
            }
            
            return Promise.all(results);
        }
        
        // 主函数 - 真正的分步实现
        (async () => {
            console.log('开始生成91看电视直播源（真正分步版）...');
            const startTime = Date.now();
            const currentTime = getBeijingTime();
            
            let m3uContent = '#EXTM3U\n';
            m3uContent += `# 91ktv直播源更新时间: ${currentTime}\n\n`;
            
            // 添加更新时间频道
            m3uContent += `#EXTINF:-1 tvg-id="UPDATE_TIME" tvg-name="更新时间: ${currentTime}" group-title="信息",更新时间: ${currentTime}\n`;
            m3uContent += `https://demo.unified-streaming.com/k8s/features/stable/video/tears-of-steel/tears-of-steel.ism/.m3u8\n\n`;
            
            let totalChannels = 0;
            let totalStreams = 0;
            let validStreams = 0;
            let invalidStreams = 0;
            let cleanedCount = 0;
            
            // 所有分类
            const categories = [
                '央视', '卫视', '高清', '4K', '影视', '体育', '新闻', '财经', '综艺', '教育',
                '纪录', '国际', '网络', '购物', '虎牙', '安徽', '北京', '重庆', '福建',
                '甘肃', '湖北', '湖南', '吉林', '江苏', '江西', '辽宁', '内蒙古', '宁夏', '青海',
                '山东', '山西', '陕西', '上海', '贵州', '海南', '河北', '河南', '黑龙江', '天津',
                '新疆', '西藏', '云南', '浙江', '广西', '广东', '四川'
            ];
            
            console.log('=== 第一步：获取所有分类的频道信息 ===');
            
            // 第一步：先获取所有频道信息（不获取播放源）
            const allChannels = [];
            
            for (const category of categories) {
                try {
                    console.log(`获取分类 ${category} 的频道列表...`);
                    const response = await axios.get(
                        `http://sj.91kds.cn/api/get_channel.php?id=${encodeURIComponent(category)}`,
                        { timeout: 10000 }
                    );
                    
                    if (response.data && Array.isArray(response.data)) {
                        console.log(`分类 ${category} 获取到 ${response.data.length} 个频道`);
                        
                        for (const channel of response.data) {
                            allChannels.push({
                                ...channel,
                                category: category
                            });
                        }
                    }
                } catch (e) {
                    console.log(`获取分类 ${category} 出错: ${e.message}`);
                }
            }
            
            console.log(`第一步完成！总共获取了 ${allChannels.length} 个频道信息\n`);
            
            // 第二步：获取所有频道的播放源信息
            console.log('=== 第二步：获取所有频道的播放源 ===');
            const allStreams = [];
            
            // 使用并发获取播放源，提高效率
            const streamResults = await processWithConcurrency(
                allChannels,
                8, // 并发数8
                async (channel) => {
                    try {
                        const nwtime = Math.floor(Date.now() / 1000);
                        const srcKey = `${channel.ename}com.jiaoxiang.fangnaleahkajfkahlajjaflfakhfakfbuyaozaigaolefuquqikangbuzhu2.3.4fu:ck:92:92:ff${nwtime}20240918`;
                        const sign = CryptoJS.MD5(srcKey).toString();
                        
                        const sourceRes = await axios.get(
                            `http://sjapi1.91kds.cn/api/get_source.php?ename=${channel.ename}&app=com.jiaoxiang.fangnale&version=2.3.4&mac=fu:ck:92:92:ff&nwtime=${nwtime}&sign=${sign}&ev=20240918`,
                            { timeout: 10000 }
                        );
                        
                        if (sourceRes.data?.liveSource && Array.isArray(sourceRes.data.liveSource)) {
                            const sources = sourceRes.data.liveSource;
                            const cleanedName = cleanChannelName(channel.name);
                            
                            if (channel.name !== cleanedName) {
                                cleanedCount++;
                            }
                            
                            for (let i = 0; i < sources.length; i++) {
                                let sourceUrl = sources[i];
                                if (sourceUrl.startsWith('kdsvod://')) {
                                    sourceUrl = sourceUrl.replace('kdsvod://', '');
                                }
                                
                                allStreams.push({
                                    url: sourceUrl,
                                    channel: channel,
                                    cleanedName: cleanedName,
                                    category: channel.category
                                });
                            }
                            
                            totalChannels++;
                            return sources.length;
                        }
                    } catch (e) {
                        console.log(`获取频道 ${channel.name} 的播放源出错: ${e.message}`);
                    }
                    return 0;
                }
            );
            
            console.log(`第二步完成！总共获取了 ${allStreams.length} 个播放源\n`);
            
            // 第三步：验证所有视频流
            console.log('=== 第三步：验证视频流有效性 ===');
            console.log(`开始验证 ${allStreams.length} 个视频流...`);
            
            const validationResults = await processWithConcurrency(
                allStreams,
                10, // 并发数10
                async (stream) => {
                    const isValid = await validateStreamWithFFmpeg(stream.url, 5);
                    return {
                        ...stream,
                        isValid: isValid
                    };
                }
            );
            
            console.log(`第三步完成！验证了 ${validationResults.length} 个视频流\n`);
            
            // 第四步：生成最终的M3U文件
            console.log('=== 第四步：生成M3U文件 ===');
            
            for (const result of validationResults) {
                if (result.isValid) {
                    m3uContent += `#EXTINF:-1 tvg-id="${result.channel.ename}" tvg-name="${result.cleanedName}" tvg-logo="${result.channel.icon}" group-title="${result.category}",${result.cleanedName}\n`;
                    m3uContent += `${result.url}\n`;
                    validStreams++;
                } else {
                    invalidStreams++;
                }
                totalStreams++;
            }
            
            // 添加统计信息
            const endTime = Date.now();
            const duration = Math.round((endTime - startTime) / 1000);
            
            m3uContent += `\n# 统计信息:\n`;
            m3uContent += `# 处理分类数: ${categories.length}\n`;
            m3uContent += `# 频道总数: ${totalChannels}\n`;
            m3uContent += `# 视频流总数: ${totalStreams}\n`;
            m3uContent += `# 有效视频流: ${validStreams}\n`;
            m3uContent += `# 无效视频流: ${invalidStreams}\n`;
            m3uContent += `# 有效率: ${totalStreams > 0 ? ((validStreams / totalStreams) * 100).toFixed(1) : 0}%\n`;
            m3uContent += `# 频道名称清理: ${cleanedCount} 个\n`;
            m3uContent += `# 验证超时: 5秒\n`;
            m3uContent += `# 并发数: 获取播放源8，验证流10\n`;
            m3uContent += `# 生成耗时: ${duration}秒\n`;
            m3uContent += `# 生成完成时间: ${getBeijingTime()}\n`;
            m3uContent += `# 处理方式: 真正分步处理\n`;
            
            fs.writeFileSync('91ktv.m3u', m3uContent);
            
            console.log('=== 生成完成 ===');
            console.log(`分类数: ${categories.length}`);
            console.log(`频道数: ${totalChannels}`);
            console.log(`总流数: ${totalStreams}`);
            console.log(`有效流: ${validStreams}`);
            console.log(`无效流: ${invalidStreams}`);
            console.log(`有效率: ${totalStreams > 0 ? ((validStreams / totalStreams) * 100).toFixed(1) : 0}%`);
            console.log(`耗时: ${duration}秒`);
            console.log(`文件已保存: 91ktv.m3u`);
        })().catch(error => {
            console.error('程序执行错误:', error);
            const currentTime = getBeijingTime();
            let content = '#EXTM3U\n';
            content += `# 91ktv直播源更新时间: ${currentTime}\n\n`;
            content += `#EXTINF:-1 tvg-id="ERROR" tvg-name="生成错误" group-title="错误",生成错误\n`;
            content += `https://demo.unified-streaming.com/k8s/features/stable/video/tears-of-steel/tears-of-steel.ism/.m3u8\n`;
            content += `\n# 生成完成时间: ${currentTime}\n`;
            fs.writeFileSync('91ktv.m3u', content);
        });
        EOF
        
        echo "开始生成直播源文件（真正分步版）..."
        node generate.js

    - name: 验证生成结果
      run: |
        echo "=== 生成结果验证 ==="
        echo "文件大小: $(wc -c < 91ktv.m3u) 字节"
        echo "总行数: $(wc -l < 91ktv.m3u)"
        echo "视频流数量: $(grep -c '^http' 91ktv.m3u)"
        echo "频道数量: $(grep -c '^#EXTINF' 91ktv.m3u)"
        echo ""
        echo "=== 特定流验证 ==="
        echo "检查utuxx.91kds.cn:"
        grep 'utuxx.91kds.cn' 91ktv.m3u -B1 || echo "未找到"
        echo ""
        echo "=== 统计信息 ==="
        tail -15 91ktv.m3u

    - name: 提交更新
      run: |
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        git add 91ktv.m3u
        git commit -m "真正分步处理版直播源更新 $(date +'%Y-%m-%d %H:%M')" || echo "无变化"
        git push

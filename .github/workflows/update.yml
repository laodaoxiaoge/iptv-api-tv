name: 91ktv直播源每日更新
on: 
  workflow_dispatch:
  schedule:
    - cron: '0 3 * * *'  # 每天UTC时间3点运行（北京时间11点）

jobs:
  generate-and-overwrite:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    steps:
    - name: 检出仓库
      uses: actions/checkout@v4
      
    - name: 设置Node.js环境
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: 安装依赖
      run: npm install axios crypto-js

    - name: 生成直播源文件
      run: |
        cat > generate.js << 'EOF'
        const axios = require('axios');
        const CryptoJS = require('crypto-js');
        const fs = require('fs');
        
        // 获取北京时间
        function getBeijingTime() {
          const now = new Date();
          return now.toLocaleString('zh-CN', { 
            timeZone: 'Asia/Shanghai',
            year: 'numeric',
            month: '2-digit',
            day: '2-digit',
            hour: '2-digit',
            minute: '2-digit',
            second: '2-digit'
          });
        }
        
        // 清理频道名称 - 只删除括号内容
        function cleanChannelName(channelName) {
          if (!channelName) return channelName;
          return channelName
            .replace(/\s*\([^)]*\)/g, '')
            .replace(/\s*（[^）]*）/g, '')
            .replace(/\s*\[[^\]]*\]/g, '')
            .trim();
        }
        
        // 优化视频流有效性检查
        async function checkStreamValidity(url, timeout = 5000) {
          try {
            // 使用HEAD请求检查URL有效性
            const response = await axios.head(url, {
              timeout,
              headers: {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
                'Range': 'bytes=0-1' // 只请求少量数据
              }
            });
            
            // 检查状态码
            return response.status >= 200 && response.status < 400;
          } catch (error) {
            // 如果HEAD请求失败，尝试GET请求
            try {
              const response = await axios.get(url, {
                timeout: 3000,
                headers: {
                  'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
                  'Range': 'bytes=0-1024' // 只请求前1KB数据
                }
              });
              return response.status >= 200 && response.status < 400;
            } catch (e) {
              return false;
            }
          }
        }
        
        // 主函数
        (async () => {
          console.log('开始生成91看电视直播源...');
          const currentTime = getBeijingTime();
          let m3uContent = '#EXTM3U\n';
          m3uContent += `# 91ktv直播源更新时间: ${currentTime}\n`;
          
          let totalChannels = 0;
          let totalStreams = 0;
          let validStreams = 0;
          let invalidStreams = 0;
          let cleanedCount = 0;
          
          // 所有分类 - 完全保留
          const categories = [
            '央视', '卫视', '高清', '4K', '影视', '体育', '新闻', '财经', '综艺', '教育',
            '纪录', '国际', '网络', '购物', '虎牙', '安徽', '北京', '重庆', '福建',
            '甘肃', '湖北', '湖南', '吉林', '江苏', '江西', '辽宁', '内蒙古', '宁夏', '青海',
            '山东', '山西', '陕西', '上海', '贵州', '海南', '河北', '河南', '黑龙江', '天津',
            '新疆', '西藏', '云南', '浙江', '广西', '广东', '四川'
          ];
          
          // 存储频道信息
          const originalChannels = new Set();
          const cleanedChannels = new Set();
          
          // 并发处理所有分类
          await Promise.all(categories.map(async (category) => {
            try {
              console.log(`处理分类: ${category}`);
              
              // 获取频道列表
              const response = await axios.get(
                `http://sj.91kds.cn/api/get极速_channel.php?id=${encodeURIComponent(category)}`,
                { timeout: 8000, headers: {'User-Agent': 'Mozilla/5.0'} }
              );
              
              if (response.data && Array.isArray(response.data)) {
                console.log(`分类 ${category} 有 ${response.data.length} 个频道`);
                
                // 并发处理每个频道
                await Promise.all(response.data.map(async (channel) => {
                  try {
                    const nwtime = Math.floor(Date.now() / 1000);
                    const srcKey = `${channel.ename}com.jiaoxiang.fangnaleahkajfkahlajjaflfakhfakfbuyaozaigaolefuqu极速qikangbuzhu2.3极速.4fu:ck:92:92:ff${nwtime}20240918`;
                    const sign = CryptoJS.MD5(srcKey).toString();
                    
                    // 获取播放源
                    const sourceRes = await axios.get(
                      `http://sjapi1.91kds.cn/api/get_source.php?ename=${channel.ename}&app=com.jiaoxiang.fangnale&version=2.3.4&mac=fu:ck:92:92:ff&nwtime=${nwtime}&sign=${sign}&ev=20240918`,
                      { timeout: 8000, headers: {'User-Agent': 'Mozilla/5.0'} }
                    );
                    
                    if (sourceRes.data?.liveSource && Array.isArray(sourceRes.data.liveSource)) {
                      const sources = sourceRes.data.liveSource;
                      const sourceNames = sourceRes.data.liveSourceName || [];
                      
                      // 记录原始频道
                      originalChannels.add(channel.name);
                      
                      // 清理频道名称
                      const cleanedName = cleanChannelName(channel.name);
                      cleanedChannels.add(cleanedName);
                      
                      if (channel.name !== cleanedName) {
                        console.log(`频道名称清理: "${channel.name}" -> "${cleanedName}"`);
                        cleanedCount++;
                      }
                      
                      // 处理每个播放源
                      for (let i = 0; i < sources.length; i++) {
                        let sourceUrl = sources[i];
                        
                        // 处理URL协议
                        if (sourceUrl.startsWith('kdsvod://')) {
                          sourceUrl = sourceUrl.replace('kdsvod://', '');
                        }
                        
                        // 优化：检查视频流有效性
                        const isValid = await checkStreamValidity(sourceUrl);
                        if (isValid) {
                          validStreams++;
                        } else {
                          invalidStreams++;
                          console.log(`无效流: ${sourceUrl}`);
                        }
                        
                        const sourceName = sourceNames[i] ? ` (${sourceNames[i]})` : '';
                        
                        m3uContent += `#EXTINF:-1 tvg-id="${channel.ename}" tvg-name="${cleanedName}" tvg-logo="${channel.icon}" group-title="${category}",${cleanedName}${sourceName}\n`;
                        m3uContent += `${sourceUrl}\n`;
                        totalStreams++;
                      }
                      
                      totalChannels++;
                    }
                  } catch (e) {
                    console.log(`跳过频道 ${channel.name}: ${e.message}`);
                  }
                }));
              }
            } catch (e) {
              console.log(`处理分类 ${category} 出错: ${e.message}`);
            }
          }));
          
          // 添加详细的统计信息
          m3uContent += `\n# 统计信息:\n`;
          m3uContent += `# 原始频道数: ${originalChannels.size}\n`;
          m3uContent += `# 清理后频道数: ${cleanedChannels.size}\n`;
          m3uContent += `# 视频流总数: ${totalStreams}\n`;
          m3uContent += `# 有效视频流: ${validStreams}\n`;
          m3u极速Content += `# 无效视频流: ${invalidStreams}\n`;
          m3uContent += `# 频道名称清理: ${cleanedCount} 个\n`;
          m3uContent += `# 生成完成时间: ${getBeijingTime()}\n`;
          
          fs.writeFileSync('91ktv.m3u', m3uContent);
          console.log(`完成! 频道: ${totalChannels}, 流: ${totalStreams}`);
          console.log(`有效流: ${validStreams}, 无效流: ${invalidStreams}`);
        })().catch(error => {
          console.error('程序执行错误:', error);
          // 确保即使出错也生成文件
          const currentTime = getBeijingTime();
          let content = '#EXTM3U\n';
          content += `# 91ktv直播源更新时间: ${currentTime}\n`;
          content += `#EXTINF:-1 tvg-id="ERROR" tvg-name="程序错误" group-title="错误",程序错误\n`;
          content += `https://demo.unified-streaming.com/k8s/features/stable/video/tears-of-steel/tears-of-steel.ism/.m3u8\n`;
          content += `\n# 生成完成时间: ${currentTime}\n`;
          fs.writeFileSync('91ktv.m3u', content);
        });
        EOF
        
        # 运行生成脚本
        node generate.js

    - name: 验证结果
      run: |
        echo "=== 验证生成结果 ==="
        echo "文件大小: $(wc -c < 91ktv.m3u) 字节"
        echo "总行数: $(wc -l < 91ktv.m3u)"
        echo "视频流数量: $(grep -c '^http' 91ktv.m3u)"
        echo "频道数量: $(grep -c '^#EXTINF' 91ktv.m3u)"
        echo ""
        echo "=== 显示名称示例 ==="
        grep '^#EXTINF' 91ktv.m3u | head -5 | sed 's/.*,//'
        echo ""
        echo "=== 统计信息 ==="
        tail -10 91ktv.m3u

    - name: 覆盖更新文件
      run: |
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        git add 91ktv.m3u
        git commit -m "更新直播源 - 优化视频流检验 $(date +'%Y-%m-%d %H:%M:%S')" || echo "无变化"
        git push

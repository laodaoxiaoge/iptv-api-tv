name: 91ktv直播源每日更新
on: 
  workflow_dispatch:
  schedule:
    - cron: '0 3 * * *'  # 每天UTC时间3点运行（北京时间11点）

jobs:
  generate-and-overwrite:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
    - name: 检出仓库
      uses: actions/checkout@v4
      
    - name: 设置Node.js环境
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: 安装依赖
      run: npm install axios crypto-js

    - name: 生成直播源文件
      run: |
        # 完整版生成脚本
        cat > generate.js << 'EOF'
        const axios = require('axios');
        const CryptoJS = require('crypto-js');
        const fs = require('fs');
        
        // 获取北京时间
        function getBeijingTime() {
          const now = new Date();
          return now.toLocaleString('zh-CN', { 
            timeZone: 'Asia/Shanghai',
            year: 'numeric',
            month: '2-digit',
            day: '2-digit',
            hour: '2-digit',
            minute: '2-digit',
            second: '2-digit'
          });
        }
        
        // 获取真正的视频流地址
        async function getRealStreamUrl(sourceUrl) {
          try {
            // 处理自定义协议
            if (sourceUrl.startsWith('kdsvod://')) {
              sourceUrl = sourceUrl.replace('kdsvod://', '');
            }
            
            // 处理加密URL
            if (sourceUrl.includes('pwd=jsdecode') && sourceUrl.includes('id=')) {
              const urlObj = new URL(sourceUrl);
              const id = urlObj.searchParams.get('id');
              const bt = urlObj.searchParams.get('bt');
              
              const nwtime = Math.floor(Date.now() / 1000);
              const params = {
                app: 'com.jiaoxiang.fangnale',
                version: '2.3.4',
                mac: 'fu:ck:92:92:ff',
                utk: '',
                nwtime: nwtime,
                ev: '20250113'
              };
              
              const appendStr = 'ahkajfkahlajjaflfakhfakfbuyaozaigaolefuquqikangbuzhu';
              let signStr = id;
              
              Object.keys(params).forEach(key => {
                if (key === 'tmk') return;
                signStr += (key === 'app') ? params[key] + appendStr : params[key];
              });
              
              params.sign = CryptoJS.MD5(signStr).toString();
              
              // 构建真实视频流URL
              let realUrl = `${urlObj.origin}${urlObj.pathname}?`;
              if (bt) realUrl += `bt=${bt}&`;
              realUrl += `id=${id}`;
              Object.keys(params).forEach(k => {
                realUrl += `&${k}=${encodeURIComponent(params[k])}`;
              });
              
              return realUrl;
            }
            
            return sourceUrl;
          } catch (e) {
            console.error('解析视频流地址失败:', e.message);
            return sourceUrl;
          }
        }
        
        // 主函数
        (async () => {
          console.log('开始生成91看电视直播源...');
          
          const currentTime = getBeijingTime();
          let m3uContent = '#EXTM3U\n';
          m3uContent += `# 91ktv直播源更新时间: ${currentTime}\n`;
          
          // 在文件顶端添加更新时间信息
          m3uContent += `#EXTINF:-1 tvg-id="UPDATE_TIME" tvg-name="更新时间: ${currentTime}" group-title="信息",更新时间: ${currentTime}\n`;
          m3uContent += `https://demo.unified-streaming.com/k8s/features/stable/video/tears-of-steel/tears-of-steel.ism/.m3u8\n`;
          
          let channelCount = 0;
          let sourceCount = 0;
          
          // 核心分类
          const categories = [
            '央视', '卫视', '高清', '4K', '影视', '体育', '新闻'
          ];
          
          // 并行处理所有分类
          await Promise.all(categories.map(async (category) => {
            console.log(`开始处理分类: ${category}`);
            
            try {
              // 获取频道列表
              const channelsRes = await axios.get(
                `http://sj.91kds.cn/api/get_channel.php?id=${encodeURIComponent(category)}`,
                { timeout: 10000, headers: {'User-Agent': 'Mozilla/5.0'} }
              );
              
              if (!channelsRes.data || !Array.isArray(channelsRes.data)) {
                console.log(`分类 ${category} 无数据`);
                return;
              }
              
              console.log(`分类 ${category} 有 ${channelsRes.data.length} 个频道`);
              
              // 处理每个频道
              for (const channel of channelsRes.data) {
                const nwtime = Math.floor(Date.now() / 1000);
                const srcKey = `${channel.ename}com.jiaoxiang.fangnaleahkajfkahlajjaflfakhfakfbuyaozaigaolefuquqikangbuzhu2.3.4fu:ck:92:92:ff${nwtime}20240918`;
                const sign = CryptoJS.MD5(srcKey).toString();
                
                try {
                  // 获取播放源
                  const sourceRes = await axios.get(
                    `http://sjapi1.91kds.cn/api/get_source.php?ename=${channel.ename}&app=com.jiaoxiang.fangnale&version=2.3.4&mac=fu:ck:92:92:ff&nwtime=${nwtime}&sign=${sign}&ev=20240918`,
                    { timeout: 10000, headers: {'User-Agent': 'Mozilla/5.0'} }
                  );
                  
                  // 检查是否有播放源
                  if (sourceRes.data?.liveSource && Array.isArray(sourceRes.data.liveSource)) {
                    const sources = sourceRes.data.liveSource;
                    const sourceNames = sourceRes.data.liveSourceName || [];
                    
                    // 处理每个播放源
                    for (let i = 0; i < sources.length; i++) {
                      let sourceUrl = sources[i];
                      
                      // 获取真正的视频流地址
                      const realStreamUrl = await getRealStreamUrl(sourceUrl);
                      
                      // 直接添加视频流地址
                      const sourceName = sourceNames[i] ? ` (${sourceNames[i]})` : '';
                      
                      m3uContent += `#EXTINF:-1 tvg-id="${channel.ename}" tvg-name="${channel.name}${sourceName}" tvg-logo="${channel.icon}" group-title="${category}",${channel.name}${sourceName}\n`;
                      m3uContent += `${realStreamUrl}\n`;
                      sourceCount++;
                    }
                    
                    channelCount++;
                  }
                } catch (e) {
                  console.log(`跳过频道 ${channel.name}`);
                }
                
                // 短暂延迟
                await new Promise(r => setTimeout(r, 50));
              }
            } catch (e) {
              console.log(`处理分类 ${category} 出错: ${e.message}`);
            }
          }));
          
          // 添加统计信息
          m3uContent += `\n# 统计信息: 共获取 ${channelCount} 个频道, ${sourceCount} 个视频流\n`;
          m3uContent += `# 生成完成时间: ${getBeijingTime()}\n`;
          
          // 覆盖写入文件
          fs.writeFileSync('91ktv.m3u', m3uContent);
          console.log(`完成! 共获取 ${channelCount} 个频道, ${sourceCount} 个视频流, 更新时间: ${currentTime}`);
        })().catch(error => {
          console.error('程序执行错误:', error);
          // 确保即使出错也生成文件
          const currentTime = getBeijingTime();
          let content = '#EXTM3U\n';
          content += `# 91ktv直播源更新时间: ${currentTime}\n`;
          content += `#EXTINF:-1 tvg-id="ERROR" tvg-name="程序错误" group-title="错误",程序执行错误\n`;
          content += `https://demo.unified-streaming.com/k8s/features/stable/video/tears-of-steel/tears-of-steel.ism/.m3u8\n`;
          content += `\n# 生成完成时间: ${currentTime}\n`;
          fs.writeFileSync('91ktv.m3u', content);
        });
        EOF
        
        # 运行生成脚本
        node generate.js

    - name: 查看生成结果
      run: |
        echo "=== 生成的文件信息 ==="
        echo "文件大小: $(wc -c < 91ktv.m3u) 字节"
        echo "行数: $(wc -l < 91ktv.m3u)"
        echo ""
        echo "=== 文件前20行 ==="
        head -20 91ktv.m3u
        echo ""
        echo "=== 文件后10行 ==="
        tail -10 91ktv.m3u

    - name: 覆盖更新文件
      run: |
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        git add 91ktv.m3u
        git commit -m "完整更新直播源 $(date +'%Y-%m-%d %H:%M:%S')" || echo "无变化"
        git push

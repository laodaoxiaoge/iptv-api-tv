name: 91ktv直播源每日更新
on: 
  workflow_dispatch:
  schedule:
    - cron: '0 3 * * *'  # 每天UTC时间3点运行（北京时间11点）

jobs:
  generate-and-overwrite:
    runs-on: ubuntu-latest
    timeout-minutes: 120
    
    steps:
    - name: 检出仓库
      uses: actions/checkout@v4
      
    - name: 安装FFmpeg
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg
        ffmpeg -version
        
    - name: 设置Node.js环境
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: 安装Node.js依赖
      run: npm install axios crypto-js

    - name: 生成直播源文件（使用FFmpeg验证）
      run: |
        cat > generate.js << 'EOF'
        const axios = require('axios');
        const CryptoJS = require('crypto-js');
        const fs = require('fs');
        const { spawn } = require('child_process');
        const { promisify } = require('util');
        const exec = promisify(require('child_process').exec);
        
        // 获取北京时间
        function getBeijingTime() {
          const now = new Date();
          return now.toLocaleString('zh-CN', { 
            timeZone: 'Asia/Shanghai',
            year: 'numeric',
            month: '2-digit',
            day: '2-digit',
            hour: '2-digit',
            minute: '2-digit',
            second: '2-digit'
          });
        }
        
        // 清理频道名称
        function cleanChannelName(channelName) {
          if (!channelName) return channelName;
          return channelName
            .replace(/\s*\([^)]*\)/g, '')
            .replace(/\s*（[^）]*）/g, '')
            .replace(/\s*\[[^\]]*\]/g, '')
            .trim();
        }
        
        // 使用FFmpeg命令行验证视频流
        async function validateStreamWithFFmpeg(url, timeoutSeconds = 8) {
          try {
            const cmd = `ffmpeg -i "${url}" -t ${timeoutSeconds} -f null - -hide_banner -loglevel error -y`;
            
            const { stdout, stderr } = await exec(cmd, { 
              timeout: (timeoutSeconds + 5) * 1000 
            });
            
            // 如果FFmpeg返回0且没有错误输出，说明流有效
            return true;
          } catch (error) {
            // 检查错误类型
            if (error.code === 'ETIMEDOUT' || error.signal === 'SIGTERM') {
              console.log(`FFmpeg验证超时: ${url}`);
            } else if (error.stderr) {
              const errorMsg = error.stderr.toLowerCase();
              if (errorMsg.includes('connection timed out') || 
                  errorMsg.includes('invalid data') ||
                  errorMsg.includes('protocol not found') ||
                  errorMsg.includes('403 forbidden') ||
                  errorMsg.includes('404 not found')) {
                console.log(`FFmpeg验证失败: ${url} - ${errorMsg.split('\n')[0]}`);
              }
            }
            return false;
          }
        }
        
        // 并发控制函数
        async function processWithConcurrency(items, concurrency, processor) {
          const results = [];
          const executing = new Set();
          
          for (const item of items) {
            if (executing.size >= concurrency) {
              await Promise.race(executing);
            }
            
            const p = processor(item).then(result => {
              executing.delete(p);
              return result;
            });
            
            executing.add(p);
            results.push(p);
          }
          
          return Promise.all(results);
        }
        
        // 主函数
        (async () => {
          console.log('开始生成91看电视直播源（FFmpeg验证版）...');
          const startTime = Date.now();
          const currentTime = getBeijingTime();
          
          let m3uContent = '#EXTM3U\n';
          m3uContent += `# 91ktv直播源更新时间: ${currentTime}\n\n`;
          
          // 添加更新时间频道
          m3uContent += `#EXTINF:-1 tvg-id="UPDATE_TIME" tvg-name="更新时间: ${currentTime}" group-title="信息",更新时间: ${currentTime}\n`;
          m3uContent += `https://demo.unified-streaming.com/k8s/features/stable/video/tears-of-steel/tears-of-steel.ism/.m3u8\n\n`;
          
          let totalChannels = 0;
          let totalStreams = 0;
          let validStreams = 0;
          let invalidStreams = 0;
          let cleanedCount = 0;
          let ffmpegTimeouts = 0;
          
          // 所有分类
          const categories = [
            '央视', '卫视', '高清', '4K', '影视', '体育', '新闻', '财经', '综艺', '教育',
            '纪录', '国际', '网络', '购物', '虎牙', '安徽', '北京', '重庆', '福建',
            '甘肃', '湖北', '湖南', '吉林', '江苏', '江西', '辽宁', '内蒙古', '宁夏', '青海',
            '山东', '山西', '陕西', '上海', '贵州', '海南', '河北', '河南', '黑龙江', '天津',
            '新疆', '西藏', '云南', '浙江', '广西', '广东', '四川'
          ];
          
          console.log(`开始处理 ${categories.length} 个分类...`);
          
          // 第一步：获取所有频道信息
          const allChannels = [];
          
          for (const category of categories) {
            try {
              console.log(`获取分类: ${category}`);
              
              const response = await axios.get(
                `http://sj.91kds.cn/api/get_channel.php?id=${encodeURIComponent(category)}`,
                { timeout: 10000 }
              );
              
              if (response.data && Array.isArray(response.data)) {
                console.log(`分类 ${category} 有 ${response.data.length} 个频道`);
                
                for (const channel of response.data) {
                  allChannels.push({
                    ...channel,
                    category: category
                  });
                }
              }
            } catch (e) {
              console.log(`获取分类 ${category} 出错: ${e.message}`);
            }
          }
          
          console.log(`总共获取了 ${allChannels.length} 个频道信息`);
          
          // 第二步：获取所有播放源
          const allStreams = [];
          
          for (const channel of allChannels) {
            try {
              const nwtime = Math.floor(Date.now() / 1000);
              const srcKey = `${channel.ename}com.jiaoxiang.fangnaleahkajfkahlajjaflfakhfakfbuyaozaigaolefuquqikangbuzhu2.3.4fu:ck:92:92:ff${nwtime}20240918`;
              const sign = CryptoJS.MD5(srcKey).toString();
              
              const sourceRes = await axios.get(
                `http://sjapi1.91kds.cn/api/get_source.php?ename=${channel.ename}&app=com.jiaoxiang.fangnale&version=2.3.4&mac=fu:ck:92:92:ff&nwtime=${nwtime}&sign=${sign}&ev=20240918`,
                { timeout: 10000 }
              );
              
              if (sourceRes.data?.liveSource && Array.isArray(sourceRes.data.liveSource)) {
                const sources = sourceRes.data.liveSource;
                const sourceNames = sourceRes.data.liveSourceName || [];
                
                // 清理频道名称
                const cleanedName = cleanChannelName(channel.name);
                
                if (channel.name !== cleanedName) {
                  console.log(`频道名称清理: "${channel.name}" -> "${cleanedName}"`);
                  cleanedCount++;
                }
                
                // 准备所有视频流
                for (let i = 0; i < sources.length; i++) {
                  let sourceUrl = sources[i];
                  
                  if (sourceUrl.startsWith('kdsvod://')) {
                    sourceUrl = sourceUrl.replace('kdsvod://', '');
                  }
                  
                  const sourceName = sourceNames[i] || '';
                  
                  allStreams.push({
                    url: sourceUrl,
                    channel: channel,
                    cleanedName: cleanedName,
                    category: channel.category,
                    sourceName: sourceName
                  });
                }
                
                totalChannels++;
              }
            } catch (e) {
              console.log(`获取频道 ${channel.name} 的播放源出错: ${e.message}`);
            }
          }
          
          console.log(`总共获取了 ${allStreams.length} 个视频流信息`);
          
          // 第三步：使用FFmpeg验证视频流（并发15）
          console.log(`开始使用FFmpeg验证 ${allStreams.length} 个视频流...`);
          
          const validationResults = await processWithConcurrency(
            allStreams,
            15, // FFmpeg验证并发数稍微降低
            async (stream) => {
              const isValid = await validateStreamWithFFmpeg(stream.url, 8);
              if (!isValid) {
                ffmpegTimeouts++;
              }
              return {
                ...stream,
                isValid: isValid
              };
            }
          );
          
          // 第四步：只输出有效视频流
          for (const result of validationResults) {
            if (result.isValid) {
              m3uContent += `#EXTINF:-1 tvg-id="${result.channel.ename}" tvg-name="${result.cleanedName}" tvg-logo="${result.channel.icon}" group-title="${result.category}",${result.cleanedName}\n`;
              m3uContent += `${result.url}\n`;
              validStreams++;
            } else {
              invalidStreams++;
            }
            totalStreams++;
          }
          
          // 添加统计信息
          const endTime = Date.now();
          const duration = Math.round((endTime - startTime) / 1000);
          
          m3uContent += `\n# 统计信息:\n`;
          m3uContent += `# 处理分类数: ${categories.length}\n`;
          m3uContent += `# 频道总数: ${totalChannels}\n`;
          m3uContent += `# 视频流总数: ${totalStreams}\n`;
          m3uContent += `# 有效视频流: ${validStreams}\n`;
          m3uContent += `# 无效视频流: ${invalidStreams}\n`;
          m3uContent += `# 有效率: ${totalStreams > 0 ? ((validStreams / totalStreams) * 100).toFixed(1) : 0}%\n`;
          m3uContent += `# 频道名称清理: ${cleanedCount} 个\n`;
          m3uContent += `# FFmpeg验证超时: ${ffmpegTimeouts} 个\n`;
          m3uContent += `# 验证超时: 8秒\n`;
          m3uContent += `# 并发数: 15\n`;
          m3uContent += `# 生成耗时: ${duration}秒\n`;
          m3uContent += `# 生成完成时间: ${getBeijingTime()}\n`;
          m3uContent += `# 验证方式: FFmpeg命令行验证\n`;
          
          fs.writeFileSync('91ktv.m3u', m3uContent);
          
          console.log(`\n=== 生成完成 ===`);
          console.log(`分类数: ${categories.length}`);
          console.log(`频道数: ${totalChannels}`);
          console.log(`总流数: ${totalStreams}`);
          console.log(`有效流: ${validStreams}`);
          console.log(`无效流: ${invalidStreams}`);
          console.log(`有效率: ${totalStreams > 0 ? ((validStreams / totalStreams) * 100).toFixed(1) : 0}%`);
          console.log(`FFmpeg验证超时: ${ffmpegTimeouts} 个`);
          console.log(`耗时: ${duration}秒`);
        })().catch(error => {
          console.error('程序执行错误:', error);
          const currentTime = getBeijingTime();
          let content = '#EXTM3U\n';
          content += `# 91ktv直播源更新时间: ${currentTime}\n\n`;
          content += `#EXTINF:-1 tvg-id="ERROR" tvg-name="生成错误" group-title="错误",生成错误\n`;
          content += `https://demo.unified-streaming.com/k8s/features/stable/video/tears-of-steel/tears-of-steel.ism/.m3u8\n`;
          content += `\n# 生成完成时间: ${currentTime}\n`;
          fs.writeFileSync('91ktv.m3u', content);
        });
        EOF
        
        echo "开始生成直播源文件（FFmpeg验证版）..."
        node generate.js

    - name: 验证FFmpeg安装
      run: |
        echo "=== FFmpeg版本信息 ==="
        ffmpeg -version
        echo ""
        echo "=== 测试FFmpeg验证功能 ==="
        ffmpeg -i "https://test-streams.mux.dev/x36xhzz/x36xhzz.m3u8" -t 3 -f null - -hide_banner -loglevel error -y && echo "✓ FFmpeg验证功能正常" || echo "✗ FFmpeg验证功能异常"

    - name: 验证生成结果
      run: |
        echo "=== 生成结果验证 ==="
        echo "文件大小: $(wc -c < 91ktv.m3u) 字节"
        echo "总行数: $(wc -l < 91ktv.m3u)"
        echo "视频流数量: $(grep -c '^http' 91ktv.m3u)"
        echo "频道数量: $(grep -c '^#EXTINF' 91ktv.m3u)"
        echo ""
        echo "=== 特定流验证 ==="
        echo "1. 检查utuxx.91kds.cn:"
        grep 'utuxx.91kds.cn' 91ktv.m3u -B1 || echo "未找到"
        echo ""
        echo "2. 检查zjcn-live-play.jstv.com:"
        grep 'zjcn-live-play.jstv.com' 91ktv.m3u -B1 || echo "未找到"
        echo ""
        echo "=== 统计信息 ==="
        tail -15 91ktv.m3u

    - name: 提交更新
      run: |
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        git add 91ktv.m3u
        git commit -m "FFmpeg验证版直播源更新 $(date +'%Y-%m-%d %H:%M')" || echo "无变化"
        git push

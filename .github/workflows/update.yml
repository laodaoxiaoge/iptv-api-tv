name: 91ktv直播源每日更新
on: 
  workflow_dispatch:
  schedule:
    - cron: '0 3 * * *'  # 每天UTC时间3点运行（北京时间11点）

jobs:
  generate-m3u:
    runs-on: ubuntu-latest
    timeout-minutes: 180
    
    steps:
    - name: 检出仓库
      uses: actions/checkout@v4
      
    - name: 设置Node.js环境
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: 安装依赖
      run: npm install axios crypto-js

    - name: 生成直播源（细心抓取版）
      run: |
        cat > generate.js << 'EOF'
        const axios = require('axios');
        const CryptoJS = require('crypto-js');
        const fs = require('fs');
        
        // 获取北京时间
        function getBeijingTime() {
          return new Date().toLocaleString('zh-CN', { 
            timeZone: 'Asia/Shanghai',
            year: 'numeric',
            month: '2-digit',
            day: '2-digit',
            hour: '2-digit',
            minute: '2-digit',
            second: '2-digit'
          });
        }
        
        // 清理频道名称
        function cleanChannelName(name) {
          if (!name) return name;
          return name
            .replace(/\s*\([^)]*\)/g, '')
            .replace(/\s*（[^）]*）/g, '')
            .replace(/\s*\[[^\]]*\]/g, '')
            .trim();
        }
        
        // 生成签名
        function generateSign(ename, nwtime) {
          const srcKey = `${ename}com.jiaoxiang.fangnaleahkajfkahlajjaflfakhfakfbuyaozaigaolefuquqikangbuzhu2.3.4fu:ck:92:92:ff${nwtime}20240918`;
          return CryptoJS.MD5(srcKey).toString();
        }
        
        // 主函数 - 细心抓取版
        async function main() {
          console.log('开始生成直播源（细心抓取版）...');
          const startTime = Date.now();
          const currentTime = getBeijingTime();
          
          let m3uContent = '#EXTM3U\n';
          m3uContent += `# 91ktv直播源更新时间: ${currentTime}\n`;
          m3uContent += `# 版本: 细心抓取版 - 确保所有API数据完整获取\n\n`;
          
          // 添加更新时间频道
          m3uContent += `#EXTINF:-1 tvg-id="UPDATE_TIME" tvg-name="更新时间: ${currentTime}" group-title="信息",更新时间: ${currentTime}\n`;
          m3uContent += `https://demo.unified-streaming.com/k8s/features/stable/video/tears-of-steel/tears-of-steel.ism/.m3u8\n\n`;
          
          let totalChannels = 0;
          let totalStreams = 0;
          
          // 所有分类
          const categories = [
            '央视', '卫视', '高清', '4K', '影视', '体育', '新闻', '财经', '综艺', '教育',
            '纪录', '国际', '网络', '购物', '虎牙', '安徽', '北京', '重庆', '福建',
            '甘肃', '湖北', '湖南', '吉林', '江苏', '江西', '辽宁', '内蒙古', '宁夏', '青海',
            '山东', '山西', '陕西', '上海', '贵州', '海南', '河北', '河南', '黑龙江', '天津',
            '新疆', '西藏', '云南', '浙江', '广西', '广东', '四川'
          ];
          
          console.log(`开始处理 ${categories.length} 个分类...`);
          
          // 处理每个分类
          for (const category of categories) {
            try {
              console.log(`处理分类: ${category}`);
              
              // 获取频道列表
              const response = await axios.get(
                `http://sj.91kds.cn/api/get_channel.php?id=${encodeURIComponent(category)}`,
                { 
                  timeout: 20000,
                  headers: {
                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
                    'Referer': 'http://www.91kds.cn/',
                    'Accept': 'application/json, text/javascript, */*; q=0.01'
                  }
                }
              );
              
              if (!response.data || !Array.isArray(response.data)) {
                console.log(`分类 ${category} 无数据，使用默认频道`);
                m3uContent += `# 分类: ${category}\n`;
                m3uContent += `#EXTINF:-1 tvg-id="default_${category}" tvg-name="${category}" group-title="${category}",${category}\n`;
                m3uContent += `https://demo.unified-streaming.com/k8s/features/stable/video/tears-of-steel/tears-of-steel.ism/.极速m3u8\n\n`;
                continue;
              }
              
              console.log(`分类 ${category} 有 ${response.data.length} 个频道`);
              m3uContent += `# 分类: ${category}\n`;
              
              // 处理每个频道
              for (const channel of response.data) {
                try {
                  const nwtime = Math.floor(Date.now() / 1000);
                  const sign = generateSign(channel.ename, nwtime);
                  
                  // 获取播放源
                  const sourceRes = await axios.get(
                    `http://sjapi1.91kds.cn/api/get_source.php?ename=${channel.ename}&app=com.jiaoxiang.fangnale&version=2.3.4&mac=fu:ck:92:92:ff&nwtime=${nwtime}&sign=${sign}&ev=20240918`,
                    { 
                      timeout: 20000,
                      headers: {
                        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
                        'Referer': 'http://www.91kds.cn/',
                        'Accept': 'application/json, text/javascript, */*; q=0.01',
                        'X-Requested-With': 'XMLHttpRequest'
                      }
                    }
                  );
                  
                  if (sourceRes.data?.liveSource && Array.isArray(sourceRes.data.liveSource)) {
                    const sources = sourceRes.data.liveSource;
                    const sourceNames = sourceRes.data.liveSourceName || [];
                    
                    console.log(`频道 ${channel.name} 有 ${sources.length} 个播放源`);
                    
                    // 清理频道名称
                    const cleanedName = cleanChannelName(channel.name);
                    
                    // 添加频道信息
                    m3uContent += `#EXTINF:-1 tvg-id="${channel.ename}" tvg-name="${cleanedName}" tvg-logo="${channel.icon}" group-title="${category}",${cleanedName}\n`;
                    
                    // 保存所有播放源
                    for (let i = 0; i < sources.length; i++) {
                      let sourceUrl = sources[i];
                      
                      // 处理URL协议
                      if (sourceUrl.startsWith('kdsvod://')) {
                        sourceUrl = sourceUrl.replace('kdsvod://', '');
                      }
                      
                      // 添加播放源
                      m3uContent += `${sourceUrl}\n`;
                      totalStreams++;
                    }
                    
                    totalChannels++;
                  } else {
                    // 如果没有播放源，添加默认源
                    console.log(`频道 ${channel.name} 无播放源，使用默认源`);
                    const cleanedName = cleanChannelName(channel.name);
                    m3uContent += `#EXTINF:-1 tvg-id="${channel.ename}" tvg-name="${cleanedName}" tvg-logo="${channel.icon}" group-title="${category}",${cleanedName}\n`;
                    m3uContent += `https://demo.unified-streaming.com/k8s/features/stable/video/tears-of-steel/tears-of-steel.ism/.m3u8\n`;
                    totalChannels++;
                    totalStreams++;
                  }
                  
                } catch (error) {
                  console.log(`获取频道 ${channel.name} 的播放源失败: ${error.message}`);
                  // 即使失败也保存频道信息
                  const cleanedName = cleanChannelName(channel.name);
                  m3uContent += `#EXTINF:-1 tvg-id="${channel.ename}" tvg-name="${cleanedName}" group-title="${category}",${cleanedName}\n`;
                  m3uContent += `https://demo.unified-streaming.com/k8s/features/stable/video/tears-of-steel/tears-of-steel.ism/.m3u8\n`;
                  totalChannels++;
                  totalStreams++;
                }
                
                // 添加延迟避免请求过快
                await new Promise(resolve => setTimeout(resolve, 300));
              }
              
              m3uContent += '\n';
              
            } catch (error) {
              console.log(`处理分类 ${category} 失败: ${error.message}`);
              // 即使失败也保存分类信息
              m3uContent += `# 分类: ${category}\n`;
              m3uContent += `#EXTINF:-1 tvg-id="default_${category}" tvg-name="${category}" group-title="${category}",${category}\n`;
              m3uContent += `https://demo.unified-streaming.com/k8s/features/stable/video/tears-of-steel/tears-of-steel.ism/.m3u8\n\n`;
            }
            
            // 添加延迟避免请求过快
            await new Promise(resolve => setTimeout(resolve, 500));
          }
          
          // 添加统计信息
          const duration = Math.round((Date.now() - startTime) / 1000);
          m3uContent += `# 统计信息:\n`;
          m3uContent += `# 处理分类数: ${categories.length}\n`;
          m3uContent += `# 频道总数: ${totalChannels}\n`;
          m3uContent += `# 播放源总数: ${totalStreams}\n`;
          m3uContent += `# 生成耗时: ${duration}秒\n`;
          m3uContent += `# 更新时间: ${getBeijingTime()}\n`;
          m3uContent += `# 版本: 细心抓取版 - 确保所有API数据完整获取\n`;
          m3uContent += `# 说明: 不验证有效性，保存所有获取到的播放源\n`;
          
          // 保存文件
          fs.writeFileSync('91ktv.m3u', m3uContent);
          
          console.log('生成完成!');
          console.log(`分类数: ${categories.length}`);
          console.log(`频道数: ${totalChannels}`);
          console.log(`播放源数: ${totalStreams}`);
          console.log(`耗时: ${duration}秒`);
        }
        
        main().catch(console.error);
        EOF
        
        echo "开始生成直播源（细心抓取版）..."
        node generate.js

    - name: 验证结果
      run: |
        echo "=== 生成结果验证 ==="
        echo "文件大小: $(wc -c < 91ktv.m3u) 字节"
        echo "总行数: $(wc -l < 91极速tv.m3u)"
        echo "播放源数量: $(grep -c '^http' 91ktv.m3u)"
        echo "频道数量: $(grep -c '^#EXTINF' 91ktv.m3u)"
        echo "分类数量: $(grep -c '# 分类:' 91kt极速v.m3u)"
        echo ""
        echo "=== 分类完整性验证 ==="
        echo "所有分类列表:"
        grep '# 分类:' 91ktv.m3u
        echo ""
        echo "=== 多线路频道示例 ==="
        echo "央视频道:"
        grep -A5 'CCTV-1综合' 91ktv.m3u | head -10
        echo ""
        echo "虎牙频道:"
        grep -A5 '虎牙英雄联盟' 91ktv.m3u | head -10
        echo ""
        echo "=== 统计信息 ==="
        tail -10 91ktv.m3u

    - name: 提交更新
      run: |
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        git add 91ktv.m3u
        git commit -m "细心抓取版直播源更新 $(date +'%Y-%m-%d %H:%M')" || echo "无变化"
        git push
